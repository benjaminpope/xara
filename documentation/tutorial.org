#+TITLE: XARA tutorial
#+AUTHOR: Frantz Martinache

!! WORK IN PROGRESS !!

This is a test.



* Discrete representation of the aperture of an instrument

Most current applications of XARA rely on a discrete binary representation of a
real (or simulated) continuous diffractive aperture. These models are built
from a regular square grid of points with a finite resolution.

The following algorithm uses a fits file featuring the 2D representation of the
aperture of a telescope.

** discrete model generation algorithm

#+begin_src python
#!/usr/bin/env python

import numpy as np
import matplotlib.pyplot as plt
import matplotlib.cm as cm
from astropy.io import fits

# ============================
#   script parameters
# ============================
step    = 0.15                             # grid step size in meters
thr     = 5e-1                             # selection threshold for mask
binary  = True                             # binary or grey mask
blim    = 0.9                              # threshold for binary mask

# ============================
#      begin script
# ============================
hdul    = fits.open('MASKCLEAR.fits.gz')
apert   = hdul['PRIMARY'].data
ppscale = hdul['PRIMARY'].header['REALSCAL'] # pupil pixel size in meters
PSZ     = apert.shape[0]                     # pupil image size


nbs     = int(PSZ / (step / ppscale))        # number of sample points across

if not (nbs % 2):
        nbs += 1 # ensure odd number of samples (align with center!)

# ============================
#   pad the pupil array 
# ============================

PW      = int(step / ppscale) + 1            # padding width
padap   = np.zeros((PSZ+2*PW, PSZ+2*PW))     # padded array
padap[PW:PW+PSZ, PW:PW+PSZ] = apert
DSZ     = PSZ/2 + PW

# ============================
#  re-grid the pupil -> pmask
# ============================

pos = step * (np.arange(nbs) - nbs/2)
xgrid, ygrid = np.meshgrid(pos, pos)
pmask = np.zeros_like(xgrid)

xpos = (xgrid / ppscale + DSZ).astype(int)
ypos = (ygrid / ppscale + DSZ).astype(int)

for jj in range(nbs):
        for ii in range(nbs):
                x0 = int(xpos[jj,ii])-PW/2
                y0 = int(ypos[jj,ii])-PW/2
                pmask[jj,ii] = padap[y0:y0+PW, x0:x0+PW].mean()

# ==========================
#  build the discrete model
# ==========================

xx = [] # discrete-model x-coordinate
yy = [] # discrete-model y-coordinate
tt = [] # discrete-model local transmission


if binary is True:
        for jj in range(nbs):
                for ii in range(nbs):
                        if (pmask[jj,ii] > blim):
                                pmask[jj,ii] = 1.0
                                xx.append(xgrid[jj,ii])
                                yy.append(ygrid[jj,ii])
                                tt.append(1.0)
                        else:
                                pmask[jj,ii] = 0.0

else:       
        for jj in range(nbs):
                for ii in range(nbs):
                        if (pmask[jj,ii] > thr):
                                xx.append(xgrid[jj,ii])
                                yy.append(ygrid[jj,ii])
                                tt.append(pmask[jj,ii])

xx = np.array(xx)
yy = np.array(yy)
tt = np.array(tt)

model = np.array([xx, yy, tt]).T
np.savetxt("jwst_model.txt", model, fmt="%+.6e %+.6e %.2f")

# =================================================
fx, (ax1, ax2) = plt.subplots(1,2)
fx.set_size_inches(10, 5, forward=True)
ax1.imshow(pmask, origin="lower", interpolation="nearest", cmap=cm.gray)
ax1.set_xticks([])
ax1.set_yticks([])
ax1.set_title('JWST Transmission model - step=%2d cm' % (step*100,))

ax2.plot(xx, yy, 'b+')
ax2.axis('equal')
ax2.set_title('JWST Discrete grid - step=%2d cm' % (step*100,))
ax2.set_xlabel("Sub-aperture x-coordinate (meters)")
ax2.set_ylabel("Sub-aperture y-coordinate (meters)")
fx.set_tight_layout(True)
# =================================================
#+end_src
